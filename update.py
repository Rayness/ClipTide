# Copyright (C) 2025 Rayness
# This program is free software under GPLv3. See LICENSE for details.

import os
import sys
import shutil
import requests
import zipfile
import time
import subprocess
import psutil
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel, QTextEdit, QProgressBar
from PyQt6.QtGui import QIcon

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
GITHUB_REPO = "Rayness/YT-Downloader"
VERSION_FILE = "./data/version.txt"
DOWNLOAD_DIR = "update_tmp"
EXTRACT_DIR = "update_extract"
APP_EXECUTABLE = "ClipTide.exe"
MAX_WAIT_TIME = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (—Å–µ–∫)

HEADERS = {"User-Agent": "Updater-App", "Accept": "application/vnd.github.v3+json"}

class UpdaterGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.check_for_update()

    def setup_ui(self):
        self.setWindowTitle("Updater")
        self.setGeometry(500, 300, 400, 350)
        layout = QVBoxLayout()
        self.setWindowIcon(QIcon("icon.ico"))

        self.label_status = QLabel("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        layout.addWidget(self.label_status)

        self.progress = QProgressBar()
        self.progress.setValue(0)
        layout.addWidget(self.progress)

        self.log_box = QTextEdit()
        self.log_box.setReadOnly(True)
        layout.addWidget(self.log_box)

        self.btn_check = QPushButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
        self.btn_check.clicked.connect(self.check_for_update)
        layout.addWidget(self.btn_check)

        self.btn_update = QPushButton("‚è¨ –û–±–Ω–æ–≤–∏—Ç—å")
        self.btn_update.setEnabled(False)
        self.btn_update.clicked.connect(self.update_program)
        layout.addWidget(self.btn_update)

        self.btn_launch = QPushButton("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.btn_launch.clicked.connect(self.launch_program)
        layout.addWidget(self.btn_launch)

        self.setLayout(layout)

    def log(self, message):
        self.log_box.append(message)
        QApplication.processEvents()  # –û–±–Ω–æ–≤–ª—è–µ–º GUI
        print(message)

    def get_local_version(self):
        try:
            if os.path.exists(VERSION_FILE):
                with open(VERSION_FILE, "r") as file:
                    return file.read().strip()
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
        return "0.0.0"

    def update_local_version(self, new_version):
        try:
            os.makedirs(os.path.dirname(VERSION_FILE), exist_ok=True)
            with open(VERSION_FILE, "w") as file:
                file.write(new_version)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")

    def get_latest_version(self):
        try:
            api_url = f"https://api.github.com/repos/{GITHUB_REPO}/releases/latest"
            response = requests.get(api_url, headers=HEADERS, timeout=10)
            if response.status_code == 200:
                return response.json().get("tag_name", "0.0.0")
            self.log(f"–û—à–∏–±–∫–∞ GitHub API: {response.status_code}")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return "0.0.0"

    def get_latest_release(self):
        try:
            api_url = f"https://api.github.com/repos/{GITHUB_REPO}/releases/latest"
            response = requests.get(api_url, headers=HEADERS, timeout=10)
            if response.status_code == 200:
                assets = response.json().get("assets", [])
                if assets:
                    return assets[0]["browser_download_url"]
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
        return None

    def check_for_update(self):
        self.btn_update.setEnabled(False)
        local = self.get_local_version()
        latest = self.get_latest_version()

        if local != latest:
            url = self.get_latest_release()
            if url:
                self.label_status.setText(f"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {latest}!")
                self.btn_update.setEnabled(True)
                self.log(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {local}, –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {latest}")
            else:
                self.label_status.setText("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        else:
            self.label_status.setText("–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")

    def download_file(self, url, filename):
        try:
            response = requests.get(url, stream=True, timeout=30)
            total_size = int(response.headers.get("content-length", 0))
            downloaded = 0
            chunk_size = 1024 * 1024  # 1MB chunks

            with open(filename, "wb") as file:
                for chunk in response.iter_content(chunk_size=chunk_size):
                    if chunk:
                        file.write(chunk)
                        downloaded += len(chunk)
                        progress = int((downloaded / total_size) * 100)
                        self.progress.setValue(progress)
                        QApplication.processEvents()
            return True
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False

    def terminate_process(self, process_name):
        try:
            for proc in psutil.process_iter(['name']):
                if proc.info['name'] == process_name:
                    proc.terminate()
                    proc.wait(timeout=5)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

    def launch_program(self):
        self.terminate_process(APP_EXECUTABLE)
        try:
            if os.path.exists(APP_EXECUTABLE):
                subprocess.Popen([APP_EXECUTABLE], shell=True)
                self.log("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
                self.close()
            else:
                self.log("–§–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

    def safe_copy(self, src, dst):
        try:
            if os.path.isdir(src):
                shutil.copytree(src, dst, dirs_exist_ok=True)
            else:
                os.makedirs(os.path.dirname(dst), exist_ok=True)
                shutil.copy2(src, dst)
            return True
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {src}: {e}")
            return False

    def update_program(self):
        self.btn_update.setEnabled(False)
        latest = self.get_latest_version()
        url = self.get_latest_release()
        
        if not url:
            self.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(DOWNLOAD_DIR, exist_ok=True)
        os.makedirs(EXTRACT_DIR, exist_ok=True)
        
        archive_path = os.path.join(DOWNLOAD_DIR, "update.zip")
        self.log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {latest}...")
        
        if not self.download_file(url, archive_path):
            return

        self.log("–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞...")
        try:
            with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤ EXTRACT_DIR, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                zip_ref.extractall(EXTRACT_DIR)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {e}")
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.terminate_process(APP_EXECUTABLE)
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

        self.log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ EXTRACT_DIR –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            for root, dirs, files in os.walk(EXTRACT_DIR):
                for file in files:
                    src_path = os.path.join(root, file)
                    rel_path = os.path.relpath(src_path, EXTRACT_DIR)
                    dst_path = os.path.join(os.getcwd(), rel_path)
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
                    if os.path.basename(dst_path) in ['config.ini', 'settings.json']:
                        continue
                        
                    self.safe_copy(src_path, dst_path)
            
            self.log("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            shutil.rmtree(DOWNLOAD_DIR, ignore_errors=True)
            shutil.rmtree(EXTRACT_DIR, ignore_errors=True)
            
            self.update_local_version(latest)
            self.label_status.setText("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            self.btn_launch.setEnabled(True)
            self.log(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏ {latest}")
            
        except Exception as e:
            self.log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.label_status.setText("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = UpdaterGUI()
    window.show()
    sys.exit(app.exec())